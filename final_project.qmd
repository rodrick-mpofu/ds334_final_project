---
title: "Final Project"
author: "Rodrick Mpofu"
format: 
  html:
    embed-resources: true
---

```{r Read the data}
# Read the data
library(tidyverse)
data_df <- read_csv("data/data.csv")
preprocessed_data_df <- read_csv("data/preprocessed_data.csv")
raw_fighter_df <- read_csv("data/raw_fighter_details.csv")
raw_total_fight_df <- read_delim("data/raw_total_fight_data.csv", delim = ";")
```


# Data Exploration

```{r}
# Weight classes

data_df |>
  group_by(weight_class) |>
  summarise(Count = n()) |>
  arrange(desc(Count)) |>
  mutate(weight_class = factor(weight_class, 
                               levels = unique(weight_class)))|>
  ggplot(aes(x = weight_class, y = Count)) +
  geom_bar(stat = "identity", fill = "green2", color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Weight Classes", x = "Weight Class", y = "Count")

```

The graph above shows the weight classes in the UFC. The most common weight class is Lightweight, followed by Welterweight and Middleweight. The least common weight classes are the openweight and catchweight classes and women's featherweight.


```{r}
# Fighting stance


raw_fighter_df |>
  group_by(Stance) |>
  summarise(Count = n()) |>
  arrange(desc(Count)) |>
  mutate(Stance = factor(Stance, 
                         levels = unique(Stance)))|>
  ggplot(aes(x = Stance, y= Count)) +
  geom_bar(stat = "identity", fill = "green2", color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Fighting Stance", x = "Stance", y = "Count")
```

The graph above shows the fighting stances in the UFC. The most common fighting stance is orthodox, followed by southpaw and switch. The least common fighting stance is open stance and sideways.

```{r}
# Wins by decision

raw_total_fight_df |>
  group_by(win_by) |>
  summarise(Count = n()) |>
  arrange(desc(Count)) |>
  mutate(win_by = factor(win_by, 
                         levels = unique(win_by)))|>
  ggplot(aes(x = win_by, y= Count)) +
  geom_bar(stat = "identity",fill = "green", color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Wins by Decision", x = "Win by", y = "Count")
```

The graph above shows the most common ways to win a fight by decision. The most common way to win a fight by decision is by unanimous decision, followed by KO/TKO, split decision and majority decision. The least common way to win a fight by decision is by split majority decision and disqualification.


```{r}
# Red Height vs Reach

ggplot(preprocessed_data_df, aes(x = R_Height_cms, y = R_Reach_cms)) +
  geom_point(color = "red") +
  theme_minimal() +
  labs(title = "Red Fighter Height vs Reach", x = "Height (cm)", y = "Reach (cm)") +
  theme(legend.position = "none") +
  geom_smooth(method = "lm", se = FALSE)
```

The graph above shows the relationship between the height and reach of red fighters. The graph shows a positive correlation between height and reach, which means that as the height of the fighter increases, the reach also increases.

```{r}

# Blue Height vs Reach

ggplot(preprocessed_data_df, aes(x = B_Height_cms, y = B_Reach_cms)) +
  geom_point(color = "blue") +
  theme_minimal() +
  labs(title = "Blue Fighter Height vs Reach", x = "Height (cm)", y = "Reach (cm)") +
  theme(legend.position = "none") +
  geom_smooth(method = "lm", se = FALSE, color = "red")
```

The graph above shows the relationship between the height and reach of blue fighters. The graph shows a positive correlation between height and reach, which means that as the height of the fighter increases, the reach also increases.


```{r}

# Red Weight vs Age

ggplot(preprocessed_data_df, aes(x = R_Weight_lbs, y = R_age)) +
  geom_point(color = "red") +
  theme_minimal() +
  labs(title = "Red Weight vs Age", x = "Weight (lbs)", y = "Age") +
  theme(legend.position = "none") +
  geom_smooth( se = FALSE)
```

The graph above shows the relationship between the weight and age of red fighters. The graph shows that there is no clear relationship between weight and age among red fighters.


```{r}

# Blue Weight vs Age

ggplot(preprocessed_data_df, aes(x = B_Weight_lbs, y = B_age)) +
  geom_point(color = "blue") +
  theme_minimal() +
  labs(title = "Blue Weight vs Age", x = "Weight (lbs)", y = "Age") +
  theme(legend.position = "none") +
  geom_smooth(color = "red")
```

The graph above shows the relationship between the weight and age of blue fighters. The graph shows that there is no clear relationship between weight and age among blue fighters.

```{r}
# Histogram of body strike takedown percentage

preprocessed_data_df |>
  ggplot(aes(x = R_avg_TD_att)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()

ggplot(preprocessed_data_df, aes(x =B_avg_TD_att)) +
  geom_histogram(fill = "yellow2", color = "black") +
  theme_minimal()
```

The graph above shows the distribution of the average takedown percentage of blue fighters. The graph shows that the average takedown attempt of blue fighters is between 0 and 2.5. The graph also shows that the average takedown attempt of red fighters is between 0 and 2.5.


```{r}
# Histogram of win by KO/TKO BY Red

ggplot(preprocessed_data_df, aes(x = `R_win_by_KO/TKO`)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```

The graph above shows the distribution of the win by KO/TKO of red fighters. The graph shows that the win by KO/TKO of red fighters is between 0 and 2.5.


```{r}

# Histogram of win by KO/TKO BY Blue
ggplot(preprocessed_data_df, aes(x = `B_win_by_KO/TKO`)) +
  geom_histogram(fill = "blue", color = "black") +
  theme_minimal()

```

The graph above shows the distribution of the win by KO/TKO of blue fighters. The graph shows that the win by KO/TKO of blue fighters is between 0 and 2.5.

```{r}

# Histogram of win by submission by Red

ggplot(preprocessed_data_df, aes(x = `R_win_by_Submission`)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```

The graph above shows the distribution of the win by submission of red fighters. The graph shows that the win by submission of red fighters is between 0 and 2.5.

```{r}

ggplot(preprocessed_data_df, aes(x = B_avg_SIG_STR_pct)) +
  geom_histogram(fill = "blue", color = "black") +
  theme_minimal()
```

```{r}

ggplot(preprocessed_data_df, aes(x = R_avg_SIG_STR_pct)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```


The graph above shows the distribution of the average significant strike percentage of blue fighters. The graph shows that the average significant strike percentage of both blue and red fighters is around 50%. And it seems like it is normally distributed.


```{r}
# UFC event per year
library(lubridate)

data_df$date <- ymd(data_df$date)


```

```{r}
# Distribution of age, Red

ggplot(preprocessed_data_df, aes(x = R_age)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```

The graph above shows the distribution of the age of red fighters. The graph shows that the age of red fighters is between 28 and 32 years old. The graph also shows that the age of red fighters is normally distributed.

```{r}

# Distribution of age, Blue

ggplot(preprocessed_data_df, aes(x = B_age)) +
  geom_histogram(fill = "blue", color = "black") +
  theme_minimal()
```

The graph above shows the distribution of the age of blue fighters. The graph shows that the age of blue fighters is between 28 and 32 years old. The graph also shows that the age of blue fighters is normally distributed.


```{r}
preprocessed_data_df |>
  pivot_longer(cols = c(R_win_by_Decision_Majority, 
                        R_win_by_Decision_Split, 
                        R_win_by_Decision_Unanimous, 
                        `R_win_by_KO/TKO`, 
                        R_win_by_Submission, 
                        R_win_by_TKO_Doctor_Stoppage,
                        B_win_by_Decision_Majority,
                        B_win_by_Decision_Split,
                        B_win_by_Decision_Unanimous,
                        `B_win_by_KO/TKO`,
                        B_win_by_Submission,
                        B_win_by_TKO_Doctor_Stoppage),
               names_to = "Win_by", values_to = "Count") |>
  mutate(Win_by = recode(Win_by,
                         "R_win_by_Decision_Majority" = "Decision_Majority",
                         "R_win_by_Decision_Split" = "Decision_Split",
                         "R_win_by_Decision_Unanimous" = "Decision_Unanimous",
                         "R_win_by_KO/TKO" = "KO/TKO",
                         "R_win_by_Submission" = "Submission",
                         "R_win_by_TKO_Doctor_Stoppage" = "TKO_Doctor_Stoppage",
                         "B_win_by_Decision_Majority" = "Decision_Majority",
                         "B_win_by_Decision_Split" = "Decision_Split",
                         "B_win_by_Decision_Unanimous" = "Decision_Unanimous",
                         "B_win_by_KO/TKO" = "KO/TKO",
                         "B_win_by_Submission" = "Submission",
                         "B_win_by_TKO_Doctor_Stoppage" = "TKO_Doctor_Stoppage")) |>
  pivot_longer(cols = c(weight_class_Bantamweight,
                        weight_class_CatchWeight,
                        weight_class_Featherweight,
                        weight_class_Flyweight,
                        weight_class_Heavyweight,
                        weight_class_LightHeavyweight,
                        weight_class_Lightweight,
                        weight_class_Middleweight,
                        weight_class_OpenWeight,
                        weight_class_Welterweight,
                        weight_class_WomenBantamweight,
                        weight_class_WomenFeatherweight,
                        weight_class_WomenFlyweight,
                        weight_class_WomenStrawweight), 
               names_to = "Fight_type", values_to = "count2") |>
  ggplot(aes(x = Fight_type, y = count2, fill = Win_by)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "UFC Fight Outcome by Division", x = "Division", y = "Count") 

```

The graph above shows the UFC fight outcome by division. The graph shows that the UFC fight outcome is mostly by KO/TKO and Decision Unanimous. The graph also shows that the UFC fight outcome is mostly in the Lightweight division.


```{r}
# UFC fight outcome over the years

data_df |> 
  pivot_longer(cols = c(R_win_by_Decision_Majority, 
                        R_win_by_Decision_Split, 
                        R_win_by_Decision_Unanimous, 
                        `R_win_by_KO/TKO`, 
                        R_win_by_Submission, 
                        R_win_by_TKO_Doctor_Stoppage,
                        B_win_by_Decision_Majority,
                        B_win_by_Decision_Split,
                        B_win_by_Decision_Unanimous,
                        `B_win_by_KO/TKO`,
                        B_win_by_Submission,
                        B_win_by_TKO_Doctor_Stoppage),
               names_to = "Win_by", values_to = "Count") |>
  mutate(Win_by = str_replace_all(Win_by, c("R_" = "", "B_" = ""))) |>
  mutate(Win_by = as.factor(Win_by)) |>
  ggplot(aes(x=year(date), fill = Win_by)) +
  geom_bar() +
  labs(title = "UFC Fight Outcome Over the Years", x = "Year", y = "Count")



```

The graph above shows the UFC fight outcome over the years. The graph shows that the UFC fight outcome is mostly by KO/TKO and Decision Unanimous. 

```{r}
# Line graph instead of bar graph

data_df |> 
  pivot_longer(cols = c(R_win_by_Decision_Majority, 
                        R_win_by_Decision_Split, 
                        R_win_by_Decision_Unanimous, 
                        `R_win_by_KO/TKO`, 
                        R_win_by_Submission, 
                        R_win_by_TKO_Doctor_Stoppage,
                        B_win_by_Decision_Majority,
                        B_win_by_Decision_Split,
                        B_win_by_Decision_Unanimous,
                        `B_win_by_KO/TKO`,
                        B_win_by_Submission,
                        B_win_by_TKO_Doctor_Stoppage),
               names_to = "Win_by", values_to = "Count") |>
  mutate(Win_by = str_replace_all(Win_by, c("R_" = "", "B_" = ""))) |>
  mutate(Win_by = as.factor(Win_by), year = year(date)) |>
  group_by(year, Win_by) |>
  summarise(Count = sum(Count), year) |>
  filter(row_number()==1) |>
  ggplot(aes(x=year, y = Count, color = Win_by)) +
  geom_line() +
  labs(title = "UFC Fight Outcome Over the Years", x = "Year", y = "Count")

```

The graph above shows the UFC fight outcome over the years. The graph shows that the UFC fight outcome is mostly by KO/TKO and Decision Unanimous. 


```{r}

data_df |>
  pivot_longer(cols = c(R_Stance, B_Stance), 
               names_to = "Fighter_B_Or_R", 
               values_to = "Stance") |>
  mutate(Stance = as.factor(Stance), year = year(date)) |>
  group_by(year, Stance) |>
  summarise(Count = n(), year) |>
  filter(row_number()==1) |>
  ggplot(aes(x=year, y = Count, color = Stance)) +
  geom_line() +
  labs(title = "UFC Fighter Stance Popularity Over the Years", x = "Year", y = "Count") +
  theme_minimal()


```

The graph above shows the UFC fighter stance popularity over the years. The graph shows that the UFC fighter stance popularity is mostly Orthodox and Southpaw. 


# Shiny app
# Map of the world showing the number of fights that have taken place in each countr

```{r}
## install.packages("maps")
library(maps)
library(tidyverse)
world_df <- ggplot2::map_data("world")
```


```{r}
# first split the location into city, state, country

ufc_world <- data_df |>
  separate(location, into = c("City", "State", "Country"), sep = ",")
```

```{r}
# how many unique countries are there in the dataset?

ufc_world |>
  select(Country) |>
  distinct()
```

```{r}
# how many fights have taken place in each country?

country_stat <- ufc_world |>
  group_by(Country) |>
  summarise(n = n()) |>
  arrange(desc(n))

country_stat
```

```{r}
# how many fights have taken place in each city?

ufc_world |>
  group_by(City) |>
  summarise(n = n()) |>
  arrange(desc(n))
```

```{r}
# how many fights have taken place in each state?

ufc_world |>
  group_by(State) |>
  summarise(n = n()) |>
  arrange(desc(n))
```

```{r}
country_stat$Country <- gsub("\"", "", country_stat$Country)

# Trim leading and trailing whitespace
country_stat$Country <- trimws(country_stat$Country)

head(country_stat$Country)
```


```{r}

world_full <- left_join(world_df, country_stat, by = c("region" = "Country"))

ggplot(data = world_full, aes(x = long, y = lat, group = group, fill = n)) +
  geom_polygon(color = "black") +
  coord_fixed(1.3) +
  theme_void() +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
  labs(title = "Number of UFC Fights by Country",
       fill = "Number of Fights") +
  theme(legend.position = "bottom")
```

The above map shows the number of UFC fights that have taken place in each country. The lighter the color, the more fights have taken place in that country. The United States has the highest number of fights, followed by Brazil and Canada.


```{r}
# state level

state_stat <- ufc_world |>
  group_by(State) |>
  summarise(n = n()) |>
  arrange(desc(n))

state_stat$State <- gsub("\"", "", state_stat$State)

# Trim leading and trailing whitespace
state_stat$State <- trimws(state_stat$State)

head(state_stat$State)
```

```{r}
state_df <- ggplot2::map_data("state")

state_stat <- state_stat |>
  mutate(State = tolower(State))

state_full <- left_join(state_df, state_stat, by = c("region" = "State"))

ggplot(data = state_full, aes(x = long, y = lat, group = group, fill = n)) +
  geom_polygon(color = "black") +
  coord_fixed(1.3) +
  theme_void() +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
  labs(title = "Number of UFC Fights by State",
       fill = "Number of Fights") +
  theme(legend.position = "bottom")
```

The above map shows the number of UFC fights that have taken place in each state. The lighter the color, the more fights have taken place in that state. The state of Nevada has the highest number of fights, followed by California and Florida. This is likely due to the fact that Las Vegas, Nevada is a popular location for UFC events. 

```{r}
# city level

city_stat <- ufc_world |>
  group_by(City) |>
  summarise(n = n()) |>
  arrange(desc(n))

city_stat$City <- gsub("\"", "", city_stat$City)

# Trim leading and trailing whitespace
city_stat$City <- trimws(city_stat$City)

head(city_stat$City)
```

```{r}
my_cities <- maps::world.cities

usa_cities <- filter(my_cities,country.etc == "USA")

head(usa_cities)

```

```{r}

city_full <- left_join(usa_cities, city_stat, by = c("name" = "City"))

```

```{r}
usa <- map_data("usa")
```

```{r}
ggplot(data = usa, aes(x = long, y = lat, group = group)) +
  geom_polygon(color = "black", fill = "white") +
  geom_point(data = city_full, aes(x = long, y = lat, size = n, group = NULL), color = "red") +
  coord_fixed(1.3) +
  theme_void() +
  labs(title = "Number of UFC Fights by City",
       size = "Number of Fights")
```

The above map shows the number of UFC fights that have taken place in each city in the United States. The size of the red dots represents the number of fights that have taken place in each city. Las Vegas, Nevada has the highest number of fights, followed by Los Angeles, California and Houston, Texas. This is consistent with the state-level map, as Las Vegas is a popular location for UFC events.




# Combined shiny app

```{r}
library(shiny)
library(shinythemes)
library(glue)
library(fmsb)

choices_R <- data_df |>
  pull(R_fighter) |>
  unique()

choices_B <- data_df |>
  pull(B_fighter) |>
  unique()

choices <- union(choices_R, choices_B)

weights <- data_df |>
  pull(weight_class) |>
  unique()

ui <- fluidPage(
  titlePanel("UFC Fighter Insights"),
  tabsetPanel(
    tabPanel("Fighter Statistics Over Time",
             theme = shinytheme("darkly"),
             sidebarLayout(
               sidebarPanel(
                 selectInput("selectedFighter", "Select a Fighter", choices = choices),
                 radioButtons("selectedWeight", "Select a Weight Class", choices = weights)
               ),
               mainPanel(
                 tabsetPanel(
                   tabPanel("Statistics Plot", plotOutput("statsPlot")),
                   tabPanel("Data Table", dataTableOutput("table"))
                 )
               )
             )
    ),
    tabPanel("Fighter Comparison",
             sidebarLayout(
               sidebarPanel(
                 selectInput("fighter1", "Fighter 1", choices = unique(data_df$R_fighter)),
                 selectInput("fighter2", "Fighter 2", choices = unique(data_df$B_fighter)),
                 actionButton("submit", "Submit")
               ),
               mainPanel(
                 plotOutput("plot"),
                 plotOutput("plot2")
               )
             )
    )
  )
)

server <- function(input, output, session) {
  # First app logic
  observeEvent(input$selectedWeight, {
    choices <- data_df |>
      filter(weight_class == input$selectedWeight) |>
      distinct(R_fighter, B_fighter) |>
      pull(R_fighter, B_fighter)
    
    updateSelectInput(session, inputId = "selectedFighter", choices = choices)
  })
  
  ufc_reactive <- reactive({
    fighter_data <- data_df |>
      filter(R_fighter == input$selectedFighter | B_fighter == input$selectedFighter) |>
      mutate(Date = as.Date(date)) |>
      select(Date, R_fighter, B_fighter,
             R_avg_SIG_STR_landed, B_avg_SIG_STR_landed,
             R_avg_TD_landed, B_avg_TD_landed,
             `R_total_time_fought(seconds)`, `B_total_time_fought(seconds)`)
    
    fighter_stats <- fighter_data |>
      mutate(SIG_STR_landed = if_else(R_fighter == input$selectedFighter,
                                      R_avg_SIG_STR_landed, B_avg_SIG_STR_landed),
             TD_landed = if_else(R_fighter == input$selectedFighter,
                                 R_avg_TD_landed, B_avg_TD_landed),
             Total_time_fought = if_else(
               R_fighter == input$selectedFighter,
               `R_total_time_fought(seconds)`, `B_total_time_fought(seconds)`)) |>
      mutate(across(c(SIG_STR_landed, TD_landed, Total_time_fought), ~ rescale(.x, to = c(0, 1))))
  })
  
  output$statsPlot <- renderPlot({
    ggplot(ufc_reactive(), aes(x = Date)) +
      geom_line(aes(y = SIG_STR_landed, colour = "Significant Strikes Landed")) +
      geom_line(aes(y = TD_landed, colour = "Takedowns Landed")) +
      geom_line(aes(y = Total_time_fought, colour = "Total Time Fought")) +
      labs(title = glue("Performance Over Time"), x = "Date", y = "Stat Value") +
      scale_color_manual(values = c("Significant Strikes Landed" = "blue", 
                                    "Takedowns Landed" = "red", "Total Time Fought" = "green")) +
      theme_minimal()
  })
  
  output$table <- renderDataTable({
    data_df |>
      filter(weight_class == input$selectedWeight)|>
      mutate(Date = as.Date(date)) |>
      select(Date, R_fighter, B_fighter,
             R_avg_SIG_STR_landed, B_avg_SIG_STR_landed,
             R_avg_TD_landed, B_avg_TD_landed,
             `R_total_time_fought(seconds)`, `B_total_time_fought(seconds)`)
  })
  
  # Second app logic
  
  fighter1 <- reactive({
    data_df |>
      filter(R_fighter == input$fighter1) |>
      select(R_fighter, R_avg_SIG_STR_landed, 
             R_avg_TD_landed, R_avg_SUB_ATT, R_avg_REV, 
             R_avg_SIG_STR_pct, R_avg_TD_pct) |>
      rename(fighter = R_fighter,
             avg_SIG_STR_landed = R_avg_SIG_STR_landed,
             avg_TD_landed = R_avg_TD_landed,
             avg_SUB_ATT = R_avg_SUB_ATT,
             avg_REV = R_avg_REV,
             avg_SIG_STR_pct = R_avg_SIG_STR_pct,
             avg_TD_pct = R_avg_TD_pct)
  })
  
  fighter2 <- reactive({
    data_df |>
      filter(B_fighter == input$fighter2) |>
      select(B_fighter, B_avg_SIG_STR_landed, 
             B_avg_TD_landed, B_avg_SUB_ATT, B_avg_REV, B_avg_SIG_STR_pct, B_avg_TD_pct) |>
      rename(fighter = B_fighter,
             avg_SIG_STR_landed = B_avg_SIG_STR_landed,
             avg_TD_landed = B_avg_TD_landed,
             avg_SUB_ATT = B_avg_SUB_ATT,
             avg_REV = B_avg_REV,
             avg_SIG_STR_pct = B_avg_SIG_STR_pct,
             avg_TD_pct = B_avg_TD_pct)
  })
  
  fighter_full_df <- reactive({
    
    fighter_full <- bind_rows(fighter1(), fighter2())
    
    fighter_full <- fighter_full |>
      drop_na() |>
      group_by(fighter) |>
      summarise(avg_SIG_STR_landed = mean(avg_SIG_STR_landed),
                avg_TD_landed = mean(avg_TD_landed),
                avg_SUB_ATT = mean(avg_SUB_ATT),
                avg_REV = mean(avg_REV),
                avg_SIG_STR_pct = mean(avg_SIG_STR_pct),
                avg_TD_pct = mean(avg_TD_pct))
    
    max_values <- fighter_full |>
      select(-fighter) |>
      summarise_all(max)
    
    min_values <- fighter_full |>
      select(-fighter) |>
      summarise_all(min)
    
    fighter_full <- bind_rows(max_values, min_values, fighter_full)
    
    # choose two fighters to compare
    
    fighter_comp <- fighter_full |>
      filter(fighter %in% c(input$fighter1, input$fighter2))
    
    # Create the radar chart data frame
    # First, find the max of each column for normalization
    max_values <- apply(fighter_comp[, 1:6], 2, max)  # Ignoring the 'fighter' column
    # Create a row for min values (using 0 or small values if negative not possible)
    min_values <- apply(fighter_comp[, 1:6], 2, function(x) min(x) - (max(x) * 0.1))
    
    fighter_comp_2 <- fighter_comp |>
      select(-fighter)
    
    fighter_comp_df <- as.data.frame(fighter_comp_2)
    
    rownames(fighter_comp_df) <- c(input$fighter1, input$fighter2)
    
    # Combine the min and max values to normalize the data properly
    radar_data <- rbind(max_values, min_values, fighter_comp_df)
    
    
  })
  
  output$plot2 <- renderPlot({
    if(input$submit == 0) {
      return("Please select two fighters and click submit")
    }
    
    # Set graphic colors
    library(RColorBrewer)
    coul <- brewer.pal(3, "Accent")
    colors_border <- coul
    library(scales)
    colors_in <- alpha(coul,0.3)
    
    
    
    radarchart(fighter_full_df(),
               axistype = 5, 
               #custom polygon
               pcol = colors_border, pfcol = 
                 colors_in, plwd = 4, plty = 1,
               #custom the grid
               cglcol = "grey", cglty = 1, axislabcol = "black", 
               caxislabels = seq(0, 20, 5), cglwd = 0.8,
               #custom labels
               vlcex = 0.8
    )
    # Add a legend
    legend("topright", 
           legend = rownames(fighter_full_df()[-c(1, 2),]),
           fill = colors_in,
           border = colors_border,
           bty = "n",
           cex = 0.8, 
           title = "Fighter")
  })
  
  output$plot <- renderPlot({
    # side by side bar plot instead of radar chart
    fighter_full <- bind_rows(fighter1(), fighter2())
    
    fighter_full <- fighter_full |>
      drop_na() |>
      group_by(fighter) |>
      summarise(avg_SIG_STR_landed = mean(avg_SIG_STR_landed),
                avg_TD_landed = mean(avg_TD_landed),
                avg_SUB_ATT = mean(avg_SUB_ATT),
                avg_REV = mean(avg_REV),
                avg_SIG_STR_pct = mean(avg_SIG_STR_pct),
                avg_TD_pct = mean(avg_TD_pct))
    
    
    fighter_full |>
      filter(fighter %in% c(input$fighter1, input$fighter2)) |>
      pivot_longer(cols = -fighter, names_to = "stat", values_to = "value") |>
      ggplot(aes(x = fighter, y = value, fill = fighter)) +
      geom_segment(aes(xend = fighter, yend = 0), 
                   color = 
                     "black") +
      geom_point(stat = 
                   "identity",
                 position = position_dodge(width = 0.5), size = 3, aes(color = fighter)) +
      facet_wrap(~stat,
                 scales = "free_y") +
      labs(title = "Fighter Stats",
           x = "Stat",
           y = "Value") +
      theme_minimal() +
      theme(axis.text.x = 
              element_text(
                angle = 0, hjust = 0.5),  
            strip.background = 
              element_blank(),
            strip.text.x = 
              element_text(size = 10))
    
  })
  
}

shinyApp(ui, server)

```

