---
title: "Final Project"
author: "Rodrick Mpofu"
format: 
  html:
    embed-resources: true
---

```{r Read the data}
# Read the data
library(tidyverse)
data_df <- read_csv("data/data.csv")
preprocessed_data_df <- read_csv("data/preprocessed_data.csv")
raw_fighter_df <- read_csv("data/raw_fighter_details.csv")
raw_total_fight_df <- read_delim("data/raw_total_fight_data.csv", delim = ";")
```


# Introduction

The Ultimate Fighting Championship (UFC) is the largest mixed martial arts promotion company in the world featuring most of the top-ranked fighters in the sport. The organization showcases nine weight divisions and enforces the Unified Rules of Mixed Martial Arts. The UFC produces events worldwide that showcase twelve weight divisions and abide by the Unified Rules of Mixed Martial Arts.This project aims to analyze the UFC data to provide insights into the fighters and fights. The data was obtained from [Kaggle](https://www.kaggle.com/datasets/rajeevw/ufcdata/data) and contains information on fighters, fights, and preprocessed data.


# Data Description

The data contains the following columns:

- `R_` and `B_` prefix signifies red and blue corner fighter stats respectively
- `_opp_` containing columns is the average of damage done by the opponent on the fighter
- `KD` is number of knockdowns
- `SIG_STR` is no. of significant strikes 'landed of attempted'
- `SIG_STR_pct` is significant strikes percentage
- `TOTAL_STR` is total strikes 'landed of attempted'
- `TD` is no. of takedowns
- `TD_pct` is takedown percentages
- `SUB_ATT` is no. of submission attempts
- `PASS` is no. times the guard was passed?
- `REV` is the no. of Reversals landed
- `HEAD` is no. of significant strinks to the head 'landed of attempted'
- `BODY` is no. of significant strikes to the body 'landed of attempted'
- `CLINCH` is no. of significant strikes in the clinch 'landed of attempted'
- `GROUND` is no. of significant strikes on the ground 'landed of attempted'
- `win_by` is method of win
- `last_round` is last round of the fight (ex. if it was a KO in 1st, then this will be 1)
- `last_round_time` is when the fight ended in the last round
- `Format` is the format of the fight (3 rounds, 5 rounds etc.)
- `Referee` is the name of the Ref
- `date` is the date of the fight
- `location` is the location in which the event took place
- `Fight_type` is which weight class and whether it's a title bout or not
- `Winner` is the winner of the fight
- `Stance` is the stance of the fighter (orthodox, southpaw, etc.)
- `Height_cms` is the height in centimeter
- `Reach_cms` is the reach of the fighter (arm span) in centimeter
- `Weight_lbs` is the weight of the fighter in pounds (lbs)
- `age` is the age of the fighter
- `title_bout` Boolean value of whether it is title fight or not
- `weight_class` is which weight class the fight is in (Bantamweight, heavyweight, Women's flyweight, etc.)
- `no_of_rounds` is the number of rounds the fight was scheduled for
- `current_lose_streak` is the count of current concurrent losses of the fighter
- `current_win_streak` is the count of current concurrent wins of the fighter
- `draw` is the number of draws in the fighter's ufc career
- `wins` is the number of wins in the fighter's ufc career
- `losses` is the number of losses in the fighter's ufc career
- `total_rounds_fought` is the average of total rounds fought by the fighter
- `total_time_fought(seconds)` is the count of total time spent fighting in seconds
- `total_title_bouts` is the total number of title bouts taken part in by the fighter
- `win_by_Decision_Majority` is the number of wins by majority judges decision in the fighter's ufc career
- `win_by_Decision_Split` is the number of wins by split judges decision in the fighter's ufc career
- `win_by_Decision_Unanimous` is the number of wins by unanimous judges decision in the fighter's ufc career
- `win_by_KO/TKO` is the number of wins by knockout in the fighter's ufc career
- `win_by_Submission` is the number of wins by submission in the fighter's ufc career
- `win_by_TKO_Doctor_Stoppage` is the number of wins by doctor stoppage in the fighter's ufc career


# Data Exploration

```{r}
# Weight classes

ggplot(data_df, aes(x = weight_class)) +
  geom_bar(fill = "green4", color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Weight Classes", x = "Weight Class", y = "Count")
```

```{r}
# Fighting stance

ggplot(raw_fighter_df, aes(x = Stance)) +
  geom_bar(fill = "green4", color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Fighting Stance", x = "Stance", y = "Count")
```

```{r}
# Wins by decision

ggplot(raw_total_fight_df, aes(x = win_by)) +
  geom_bar(fill = "green4", color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Wins by Decision", x = "Win by", y = "Count")
```

```{r}
# Red Height vs Reach

ggplot(preprocessed_data_df, aes(x = R_Height_cms, y = R_Reach_cms)) +
  geom_point(color = "red") +
  theme_minimal() +
  labs(title = "Red Height vs Reach", x = "Height (cm)", y = "Reach (cm)") +
  theme(legend.position = "none")
```

```{r}

# Blue Height vs Reach

ggplot(preprocessed_data_df, aes(x = B_Height_cms, y = B_Reach_cms)) +
  geom_point(color = "blue") +
  theme_minimal() +
  labs(title = "Blue Height vs Reach", x = "Height (cm)", y = "Reach (cm)") +
  theme(legend.position = "none")
```

```{r}

# Red Weight vs Age

ggplot(preprocessed_data_df, aes(x = R_Weight_lbs, y = R_age)) +
  geom_point(color = "red") +
  theme_minimal() +
  labs(title = "Red Weight vs Age", x = "Weight (lbs)", y = "Age") +
  theme(legend.position = "none")
```

```{r}

# Blue Weight vs Age

ggplot(preprocessed_data_df, aes(x = B_Weight_lbs, y = B_age)) +
  geom_point(color = "blue") +
  theme_minimal() +
  labs(title = "Blue Weight vs Age", x = "Weight (lbs)", y = "Age") +
  theme(legend.position = "none")
```

```{r}
# Histogram of body strike takedown percentage

ggplot(preprocessed_data_df, aes(x =B_avg_TD_pct)) +
  geom_histogram(fill = "green4", color = "black") +
  theme_minimal()
```

```{r}
# Histogram of win by KO/TKO BY Red

ggplot(preprocessed_data_df, aes(x = `R_win_by_KO/TKO`)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```

```{r}

# Histogram of win by KO/TKO BY Blue
ggplot(preprocessed_data_df, aes(x = `B_win_by_KO/TKO`)) +
  geom_histogram(fill = "blue", color = "black") +
  theme_minimal()

```

```{r}

# Histogram of win by submission by Red

ggplot(preprocessed_data_df, aes(x = `R_win_by_Submission`)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```

```{r}


ggplot(preprocessed_data_df, aes(x = B_avg_SIG_STR_pct)) +
  geom_histogram(fill = "blue", color = "black") +
  theme_minimal()
```

```{r}

# significant strikes percentage By Blue vs Oppoenent

ggplot(preprocessed_data_df, aes(x = B_avg_SIG_STR_pct, y = B_avg_opp_SIG_STR_pct)) +
  geom_point(color = "blue") +
  theme_minimal() +
  facet_wrap(Winner~title_bout)
```



```{r}
# UFC event per year
library(lubridate)

data_df$date <- ymd(data_df$date)


ggplot(data_df, aes(x = year(date))) +
  geom_bar(fill = "green4", color = "black") +
  theme_minimal() +
  labs(title = "UFC Events per Year", x = "Year", y = "Count")


```

```{r}
# Distribution of age, Red


ggplot(preprocessed_data_df, aes(x = R_age)) +
  geom_histogram(fill = "red", color = "black") +
  theme_minimal()
```

```{r}

# Distribution of age, Blue

ggplot(preprocessed_data_df, aes(x = B_age)) +
  geom_histogram(fill = "blue", color = "black") +
  theme_minimal()
```

```{r}

# UFC fight out by Division

ggplot(raw_total_fight_df, aes(x= Fight_type, fill = win_by)) +
  geom_bar() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "UFC Fight Outcome by Division", x = "Division", y = "Count")
```

```{r}
preprocessed_data_df |>
  pivot_longer(cols = c(R_win_by_Decision_Majority, 
                        R_win_by_Decision_Split, 
                        R_win_by_Decision_Unanimous, 
                        `R_win_by_KO/TKO`, 
                        R_win_by_Submission, 
                        R_win_by_TKO_Doctor_Stoppage,
                        B_win_by_Decision_Majority,
                        B_win_by_Decision_Split,
                        B_win_by_Decision_Unanimous,
                        `B_win_by_KO/TKO`,
                        B_win_by_Submission,
                        B_win_by_TKO_Doctor_Stoppage),
               names_to = "Win_by", values_to = "Count") |>
  pivot_longer(cols = c(weight_class_Bantamweight,
                        weight_class_CatchWeight,
                        weight_class_Featherweight,
                        weight_class_Flyweight,
                        weight_class_Heavyweight,
                        weight_class_LightHeavyweight,
                        weight_class_Lightweight,
                        weight_class_Middleweight,
                        weight_class_OpenWeight,
                        weight_class_Welterweight,
                        weight_class_WomenBantamweight,
                        weight_class_WomenFeatherweight,
                        weight_class_WomenFlyweight,
                        weight_class_WomenStrawweight), 
               names_to = "Fight_type", values_to = "count2") |>
  ggplot(aes(x = Fight_type, y = count2, fill = Win_by)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "UFC Fight Outcome by Division", x = "Division", y = "Count") 

```


```{r}
# UFC fight outcome over the years

data_df |> 
  pivot_longer(cols = c(R_win_by_Decision_Majority, 
                        R_win_by_Decision_Split, 
                        R_win_by_Decision_Unanimous, 
                        `R_win_by_KO/TKO`, 
                        R_win_by_Submission, 
                        R_win_by_TKO_Doctor_Stoppage,
                        B_win_by_Decision_Majority,
                        B_win_by_Decision_Split,
                        B_win_by_Decision_Unanimous,
                        `B_win_by_KO/TKO`,
                        B_win_by_Submission,
                        B_win_by_TKO_Doctor_Stoppage),
               names_to = "Win_by", values_to = "Count") |>
  mutate(Win_by = str_replace_all(Win_by, c("R_" = "", "B_" = ""))) |>
  mutate(Win_by = as.factor(Win_by)) |>
  ggplot(aes(x=year(date), fill = Win_by)) +
  geom_bar() +
  labs(title = "UFC Fight Outcome Over the Years", x = "Year", y = "Count")



```

```{r}
# Line graph instead of bar graph

data_df |> 
  pivot_longer(cols = c(R_win_by_Decision_Majority, 
                        R_win_by_Decision_Split, 
                        R_win_by_Decision_Unanimous, 
                        `R_win_by_KO/TKO`, 
                        R_win_by_Submission, 
                        R_win_by_TKO_Doctor_Stoppage,
                        B_win_by_Decision_Majority,
                        B_win_by_Decision_Split,
                        B_win_by_Decision_Unanimous,
                        `B_win_by_KO/TKO`,
                        B_win_by_Submission,
                        B_win_by_TKO_Doctor_Stoppage),
               names_to = "Win_by", values_to = "Count") |>
  mutate(Win_by = str_replace_all(Win_by, c("R_" = "", "B_" = ""))) |>
  mutate(Win_by = as.factor(Win_by), year = year(date)) |>
  group_by(year, Win_by) |>
  summarise(Count = sum(Count), year) |>
  filter(row_number()==1) |>
  ggplot(aes(x=year, y = Count, color = Win_by)) +
  geom_line() +
  labs(title = "UFC Fight Outcome Over the Years", x = "Year", y = "Count")

```

```{r}

data_df |>
  pivot_longer(cols = c(R_Stance, B_Stance), 
               names_to = "Fighter_B_Or_R", 
               values_to = "Stance") |>
  mutate(Stance = as.factor(Stance), year = year(date)) |>
  group_by(year, Stance) |>
  summarise(Count = n(), year) |>
  filter(row_number()==1) |>
  ggplot(aes(x=year, y = Count, color = Stance)) +
  geom_line() +
  labs(title = "UFC Fighter Stance Popularity Over the Years", x = "Year", y = "Count") +
  theme_minimal()


```

# Shiny app


```{r}

# table of fighters

data_df |> 
  pivot_longer(cols = c(R_fighter, B_fighter), 
               names_to = "Fighter_Name", 
               values_to = "Fighter") |>
  filter(!is.na(Fighter)) 

```

```{r}
colnames(data_df)
```

```{r}

# Filter data for a specific fighter
fighter_data <- data_df |> 
  filter(R_fighter == "Conor McGregor" | B_fighter == "Conor McGregor") |>
  mutate(Date = as.Date(date)) |>
  select(Date, R_fighter, B_fighter, R_avg_SIG_STR_landed, B_avg_SIG_STR_landed, 
         R_avg_TD_landed, B_avg_TD_landed, `R_total_time_fought(seconds)`, `B_total_time_fought(seconds)`)

```

```{r}
library(shiny)

choices_R <- data_df |>
  pull(R_fighter) |>
  unique()

choices_B <- data_df |>
  pull(B_fighter) |>
  unique()

choices <- union(choices_R, choices_B)

ui <- fluidPage(
  titlePanel("Fighter Stats Over Time"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selectedFighter", "Select a Fighter",
                  choices = choices)
    ),
    mainPanel(
      plotOutput("statsPlot")
    )
  )
)

```


```{r}
server <- function(input, output) {
  output$statsPlot <- renderPlot({
    
    # Filter data for a specific fighter
    fighter_data <- data_df |> 
      filter(R_fighter == input$selectedFighter | B_fighter == input$selectedFighter) |>
      mutate(Date = as.Date(date)) |>
      select(Date, R_fighter, B_fighter, 
             R_avg_SIG_STR_landed, B_avg_SIG_STR_landed, 
             R_avg_TD_landed, B_avg_TD_landed, 
             `R_total_time_fought(seconds)`, `B_total_time_fought(seconds)`)
    
    
    # Determine which corner the fighter was in and select the correct stats
    fighter_stats <- fighter_data |>
      mutate(SIG_STR_landed = if_else(R_fighter == input$selectedFighter, 
                                      R_avg_SIG_STR_landed, B_avg_SIG_STR_landed),
             TD_landed = if_else(R_fighter == input$selectedFighter, 
                                 R_avg_TD_landed, B_avg_TD_landed),
             Total_time_fought = if_else(
               R_fighter == input$selectedFighter, 
                                         `R_total_time_fought(seconds)`, `B_total_time_fought(seconds)`))
    
    # Plotting
    ggplot(fighter_stats, aes(x = Date)) +
      geom_line(aes(y = SIG_STR_landed, colour = "Significant Strikes Landed")) +
      geom_line(aes(y = TD_landed, colour = "Takedowns Landed")) +
      geom_line(aes(y = Total_time_fought, colour = "Total Time Fought")) +
      labs(title = "Fighter Performance Over Time", x = "Date", y = "Stat Value") +
      scale_color_manual(values = c("Significant Strikes Landed" = "blue", 
                                    "Takedowns Landed" = "red", "Total Time Fought" = "green")) +
      theme_minimal()
  })
}

```

```{r}
shinyApp(ui, server)
```




